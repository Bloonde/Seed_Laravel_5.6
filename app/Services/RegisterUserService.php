<?php

namespace app\Services;

use App\Configurations\RegisterUserConfigurationImpl;
use App\Helpers\ProfileHelper;
use App\Http\Resources\RegisterUserResource;
use app\Repositories\RegisterUserRepository;
use Danvelcab\ProjectGenerator\AbstractClasses\AbstractService;
use EBarriosBloonde\UsersAndPrivileges\Services\UserService;
use EBarriosBloonde\UsersAndPrivileges\User;


class RegisterUserService extends AbstractService
{

    protected $repository;
    protected $userService;

    private static $__instance = null;

    public $configuration_impl;
    public $model;



    public function __construct()
    {
        $this->configuration_impl = new RegisterUserConfigurationImpl();
        $this->model = $this->configuration_impl->getModelName();
        $this->repository = RegisterUserRepository::getInstance(); //Remove  params if exist a specific repository for this resource
        $this->userService = UserService::getInstance();
    }

    /** This function receive an id and return the venue with the id
     * @param $id
     * @return mixed
     */
    public function get($id){
        $model = $this->repository->get($id);
        return new RegisterUserResource($model, $this->configuration_impl);
    }

    /** This function receive an input array and return a venue array
     * @param $input - This parameter contains query params in order to filter and order the db query
     * @return mixed
     */
    public function list($input){
        $paginate = isset($input['page']); //When the list is for a select, the params page isn't send
        $response = $this->repository->getList($input, $paginate);
        return $response;
    }

    public function getSelectorList($input){
        $response = $this->repository->getSelectorList($input);
        return $response;
    }

    public function update($request, $id = null){
        $user = $this->userService->update($request, $id, ['superadmin'], true, true); // En la edición del perfil, el profile será nulo y addProfiles será false.
        if(is_null($id)) {
            $id = $user->id;
        }
        $registerUser = $this->model::firstOrNew(['id' => $id]);
        $this->set($request, $registerUser);
        return $this->get($registerUser->id);
    }
    public function extraSet($request, $model, $extra, $prefix)
    {
        return parent::extraSet($request, $model, $extra, $prefix); // TODO: Change the autogenerated stub
    }

    public function delete($id){
        $this->repositoy->delete($id);
        return null;
    }

    public function getFields()
    {
        return $this->configuration_impl->getAutoSaveFields();
    }

    public static function getInstance(){
        if(self::$__instance === null){
            self::$__instance = new RegisterUserService();
        }
        return self::$__instance;
    }
}